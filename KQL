Azure Monitor
Create a Separate Repo for this in future

// 1. App Registration

//Both New and Deletion

AuditLogs
| where (ActivityDisplayName == "Add service principal"
    or  ActivityDisplayName == "Remove service principal")
    and Category == "ApplicationManagement"
    and Identity != "Managed Service Identity"
| project
Activity_time = TimeGenerated,
OperationName,
AADOperationType,
InitiatedBy = InitiatedBy.user.userPrincipalName,
ObjectID = TargetResources[0].id,
App_Name = TargetResources[0].displayName


///////////////////////////////////////
//// 2. Conditional Access Policy

AuditLogs 
| where Category == "Policy" and ActivityDisplayName == "Update conditional access policy" or ActivityDisplayName == "Add conditional access policy" or ActivityDisplayName == "Update continuous access evaluation"
| project
    Time_UTC = TimeGenerated,
    InitiatedBy = InitiatedBy.user.userPrincipalName,
    Activity = ActivityDisplayName,
    Access_Policy_Name = TargetResources[0].displayName,
    Result,
    Log_Type = Type

//Query 2 : Internet Query : Signin Logs affected (Report Failure) by Conditional access policy

SigninLogs
| mvexpand ConditionalAccessPolicies
| where ConditionalAccessPolicies contains "require mam policy assurance"
//| where ConditionalAccessPolicies["result"] == "reportFailure"
| where Status contains "501291"
//| where ConditionalAccessPolicies ["displayname"] == "require mam policy assurance"
| project
    TimeGenerated,
    Identity,
    Status,
    UserPrincipalName,
    AzureADApplication = AppDisplayName,
    ClientApplication = ClientAppUsed,
    ClientBrowser = DeviceDetail.browser,
    ClientOperatingSystem = DeviceDetail.operatingSystem,
    ClientIPAddress = IPAddress,
    ClientUserAgent = UserAgent,
    ConditionalAccessPolicyName = ConditionalAccessPolicies["displayName"],
    ConditionalAccessPolicyID = ConditionalAccessPolicies["id"]
    
    
    
    ////////////////////////
    
    //3. Global Admin Audit
    
    // Join both the queries in the future
    
    //Query 1

AuditLogs 
| where OperationName == "Update user" and TargetResources[0].userPrincipalName in ("Global Admin UPN")
| project
    Time_UTC = TimeGenerated,
    InitiatedBy = InitiatedBy.user.userPrincipalName,
    TargetResource = TargetResources[0].userPrincipalName,
    ModifiedProperty_1 = TargetResources[0].modifiedProperties,
    ModifiedProperty_2 = TargetResources[0].modifiedProperties[1],
    ModifiedProperty_3 = TargetResources[0].modifiedProperties[2]

//Query 2

AuditLogs
| where InitiatedBy.user.userPrincipalName contains "Global Admin UPN"
| project
    Time_UTC = TimeGenerated,
    InitiatedBy = InitiatedBy.user.userPrincipalName,
    Operation = OperationName,
    ModifiedProperty_1 = TargetResources[0].modifiedProperties[0],
    ModifiedProperty_2 = TargetResources[0].modifiedProperties[1],
    ModifiedProperty_3 = TargetResources[0].modifiedProperties[2]
    
    
    /////4. Risky Users
    
    // Query 1

AADRiskyUsers |
where RiskState == "atRisk" and RiskLevel == "medium" or RiskLevel == "low"
| project User_Display_Name = UserDisplayName, RiskLevel
| summarize User_Risk_count=count() by User_Display_Name, RiskLevel
| render barchart                

// summarize count() by bin(Timestamp, 1d), DestinationDevicename
//| render linechart

//Query 2 : Location Wise

AADUserRiskEvents |
where RiskState != "remediated" and RiskState != "dismissed"
| project
User = UserDisplayName,
RiskLevel,
City = Location.city,
State = Location.state,
Country = Location.countryOrRegion
| summarize Count=count() by User,RiskLevel,tostring(Country)
| render columnchart

/// 5. Top Apps Used (City Wise)

SigninLogs
| where IsInteractive == "true" and ResourceDisplayName != ""
| project
Time_UTC =TimeGenerated,
Application = ResourceDisplayName,
Country = LocationDetails.countryOrRegion,
State = LocationDetails.state,
city = LocationDetails.city
| summarize Hits=count() by Application,tostring(city)//,tostring(State),tostring(city)
| order by Hits
| take 30
//| render piechart



//////////////////////////////////////////////////////
///////////////////////////////////////

PowerBI Queries

/*
The exported Power Query Formula Language (M Language ) can be used with Power Query in Excel
and Power BI Desktop.
For Power BI Desktop follow the instructions below: 
1) Download Power BI Desktop from https://powerbi.microsoft.com/desktop/
2) In Power BI Desktop select: 'Get Data' -> 'Blank Query'->'Advanced Query Editor'
3) Paste the M Language script into the Advanced Query Editor and select 'Done'
*/

/*
Top Apps Usage (By City)

Following the same example one can modify the M query as per req... the only thing that needs to be changed is let source = part ...replace the whole block with your custom KQL query
*/



let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/<Workspace-ID>/query", 
[Query=[#"query"="SigninLogs
| where IsInteractive == ""true"" and ResourceDisplayName != """"
| project
Time_UTC =TimeGenerated,
Application = ResourceDisplayName,
Country = LocationDetails.countryOrRegion,
State = LocationDetails.state,
city = LocationDetails.city
| summarize Hits=count() by Application,tostring(city)
| order by Hits
| take 30

",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="P1D",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery


